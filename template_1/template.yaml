apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-template-1
  title: python-template-1
  description: Dummy template 1
  tags:
    - recommended
    - python
spec:
  owner: v-jwysokinski@expediagroup.com
  type: lambda
  parameters:
    - title: Provide information about project
      required:
        - project_name
        - owner
      properties:
        project_name:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component (Can be backstage group/team)
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        cloud_provider:
          title: Cloud provider
          type: string
          description: Cloud provider
          default: aws
          enum:
            - aws
            - gcp
            - azure
          enumNames:
            - 'Amazon Web Services (aws)'
            - 'Google Cloud Platform (gcp)'
            - 'Microsoft Azure (azure)'

          
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        cookiecutterCompat: true
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          project_name: ${{ parameters.project_name }}
          description: ${{ parameters.description }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          owner: ${{ parameters.owner }}
          cloud_provider: ${{parameters.cloud_provider }}
          project_specific_value: 1
          command_line_interface: argparse
          pypi_username: TODO
          project_slug: ${{ cookiecutter.project_name }}
          # project_slug: {{ cookiecutter.project_name.lower().replace(' ', '_').replace('-', '_') }}
          version: 0.1.0
          create_author_file: y
          open_source_license: Not open source
          time: "time"
#          time: $(Get-Date -Format "YYYYMMDDThhmmssZ")

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.project_name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
